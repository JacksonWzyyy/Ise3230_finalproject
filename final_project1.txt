# -*- coding: utf-8 -*-
"""
Created on Sat Nov 26 13:18:20 2022

@author: alith, Ziyi, Peike
"""

import gurobipy as gp
from gurobipy import GRB
import pandas as pd 


# importing the data set which contains the marketing information of 34 NBA2020 players

data = pd.read_csv('NBAData.csv')

n = len(data['Name'])


#  creating vectors of cost of purchasing a player(c), 
#  defence rate of each player(d), and offence rate of each player(O)

Cost = data['Salary']
D = data['Defence']
O = data['Offence']


# creating sets of players for each position

Pg =[]
sg =[]
Sf =[]
pf =[]
C =[]
Pgsg =[]
Sfpfc =[]

for i in range(n):
    if data['Position'][i]==1:
        Pg.append(i)
    if data['Position'][i]==2:
        sg.append(i)
    if data['Position'][i]==3:
        Sf.append(i)
    if data['Position'][i]==4:
        pf.append(i)
    if data['Position'][i]==5:
        C.append(i)
    if data['Position'][i]==6:
        Pgsg.append(i)
    if data['Position'][i]==7:
        Sfpfc.append(i)


# creating a matrix to show which players were teammates before

cols = n
rows = n
A = [[0 for _ in range(cols)] for _ in range(rows)]


for i in range(n):
    if pd.notna(data['Teammate'][i]):
        A[int(data['Teammate'][i])][i] = 1
        A[i][int(data['Teammate'][i])] = 1




# defining budget and the boost overal rate constant for players who played together before (alpha) 

B = 70 #it is in million 

alpha = 0.05 # which if players who played before together and are selected thier rates boost by 3%


# the optimization model of maximizing the overall defence and offence rates by 
# considering some constrains

m = gp.Model("Fantacy Basketball")
x = m.addVars(n, vtype=GRB.BINARY, name="x")
y = m.addMVar( (n,n), vtype = GRB.BINARY, name="y")

# objective function
sum_offence = gp.quicksum([O[i] * x[i] for i in range(0,n)])
sum_defence = gp.quicksum([D[i] * x[i] for i in range(0,n)])

sum_teammates = gp.quicksum(A[i][j] * y[i][j] 
                            * (alpha*(O[i] + D[i]+ D[j] + O[j]))for j in range(n) for i in range(n) if i <j)


# creat objective function 

m.setObjective(sum_offence + sum_defence + sum_teammates, GRB.MAXIMIZE)

#m.setObjective(sum_offence + sum_defence , GRB.MINIMIZE)


# adding the constrains 
m.addConstr(gp.quicksum(x[i] for i in range(0,n)) == 7)
m.addConstr(gp.quicksum([Cost[i] * x[i] for i in range(0,n)]) <= B)
m.addConstrs(((x[i] >= 0) for i in range(0,n)))


# constrains for 5 main positions which could have at least 1 and at most 2 paleyrs at
#Pg
m.addConstr((gp.quicksum([x[i] for i in Pg]) + gp.quicksum([x[i] for i in Pgsg])) >=1)
m.addConstr((gp.quicksum([x[i] for i in Pg]) + gp.quicksum([x[i] for i in Pgsg])) <=2)

#sg
m.addConstr((gp.quicksum([x[i] for i in sg]) + gp.quicksum([x[i] for i in Pgsg])) >=1)
m.addConstr((gp.quicksum([x[i] for i in sg]) + gp.quicksum([x[i] for i in Pgsg])) <=2)

#Sf
m.addConstr((gp.quicksum([x[i] for i in Sf]) + gp.quicksum([x[i] for i in Sfpfc])) >=1)
m.addConstr((gp.quicksum([x[i] for i in Sf]) + gp.quicksum([x[i] for i in Sfpfc])) <=2)

#pf
m.addConstr((gp.quicksum([x[i] for i in pf]) + gp.quicksum([x[i] for i in Sfpfc])) >=1)
m.addConstr((gp.quicksum([x[i] for i in pf]) + gp.quicksum([x[i] for i in Sfpfc])) <=2)

#C
m.addConstr((gp.quicksum([x[i] for i in C]) + gp.quicksum([x[i] for i in Sfpfc])) >=1)
m.addConstr((gp.quicksum([x[i] for i in C]) + gp.quicksum([x[i] for i in Sfpfc])) <=2)

# if both players who are selected played together before

 
m.addConstrs(x[i] + x[j] >= 2*y[i][j]*A[i][j] for j in range(n) for i in range(n) if i < j)
m.addConstrs(x[i] + x[j] <= (((1+y[i][j])*A[i][j]) + 1 + y[i][j])for j in range(n) for i in range(n) if i <j)











#optimize 
m.optimize()

print("obj_func = ", m.objVal)

for v in m.getVars():
    print('%s = %g' % (v.varName, v.x))


